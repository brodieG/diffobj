
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source(file.path('_helper', 'init.R'))
> 
> rdsf <- function(x)
+   readRDS(file.path("testthat", "helper", "diffChr", sprintf("%s.rds", x)))
> txtf <- function(x)
+   readLines(file.path("testthat", "helper", "diffChr", sprintf("%s.txt", x)))
> 
> # - Corner Cases ---------------------------------------------------------------
> 
> # Corner cases from https://neil.fraser.name/writing/diff/
> # Both of these appear handled correctly by the algorithm here
> # first one: suboptimal edit script due to two sided approach
> 
> A1 <- c("X", "A", "X", "C", "X", "A", "B", "C")
> B1 <- c("A", "B", "C", "Y")
> all.equal(as.character(diffChr(A1, B1)), rdsf(100))
[1] TRUE
> 
> # second one: failure to find intersection at ends of paths (paths run into
> # each other eventually)
> 
> A2 <- c("A", "B", "X", "A", "B")
> B2 <- c("A", "Y", "B")
> all.equal(as.character(diffChr(A2, B2)), rdsf(200))
[1] TRUE
> 
> # Simple corner cases
> 
> all.equal(
+   as.character(diffChr(character(), character())), rdsf(225)
+ )
[1] TRUE
> all.equal(as.character(diffChr("", "")), rdsf(250))
[1] TRUE
> 
> # - Larger strings -------------------------------------------------------------
> 
> # diffChr(X[1:2000], X[2001:4000])
> 
> all.equal(as.character(diffChr(chr.7, chr.8)), rdsf(300))
[1] "Attributes: < Component \"len\": Mean relative difference: 0.0137457 >"
[2] "Lengths (291, 287) differ (string compare on first 287)"               
[3] "285 string mismatches"                                                 
> 
> # Too slow to run; useful for benchmarking though
> 
> # X1 <- X[1:2e4]
> # X2 <- X1[-sample(seq_along(X1), 2e3)]
> # X2[sample(seq_along(X2), 4e3)] <- "XXXXXX"
> # res <- diffChr(X1, X2)
> # res <- diffChr(X[1:10000], X[7500:17500])
> # res <- ses(X[1:10000], X[7500:17500])
> # res <- diffChr(X[1:25000], X[10001:50000], max.diffs=65000)
> 
> # - Sentences
> chr.5 <- c(
+   "hello there how are you doing",
+   "humpty dumpty took a big fall",
+   "lorem ipsum dolor sic est boom",
+   "a computer once wrote a phrase"
+ )
> chr.6 <- c(
+   "hello THERE how are you doing",
+   "and another SENTENCE blah blah",
+   "humpty dumpty TOOK a big fall",
+   "a COMPUTER once wrote a phrase"
+ )
> all.equal(as.character(diffChr(chr.5, chr.6)), rdsf(400))
[1] TRUE
> all.equal(
+   as.character(diffChr(chr.5, chr.6, mode="unified")), rdsf(500)
+ )
[1] TRUE
> all.equal(
+   as.character(diffChr(chr.5, chr.6, mode="context")), rdsf(600)
+ )
[1] TRUE
> # - Whitespace -----------------------------------------------------------------
> 
> all.equal(
+   as.character(diffChr(c("a", "b", "c"), c("a ", "b", "c"))), rdsf(800)
+ )
[1] TRUE
> all.equal(
+   as.character(
+     diffChr(c("a", "b", "c"), c("a ", "b", "c"), ignore.white.space=FALSE)
+   ),
+   rdsf(900)
+ )
[1] TRUE
> # New lines count as new elements
> all.equal(
+   as.character(diffChr("woo\nhoo\nfoo", c("woo", "foo"))), rdsf(1000)
+ )
[1] TRUE
> all.equal(
+   capture.ouptut(diffChr("hello . world", "hello.  world", format='raw')),
+   txtf(100)
+ )
Error in capture.ouptut(diffChr("hello . world", "hello.  world", format = "raw")) : 
  could not find function "capture.ouptut"
Calls: all.equal
Execution halted
